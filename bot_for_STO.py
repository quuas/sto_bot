import logging
import psycopg2
from datetime import datetime, timedelta, date
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler, CallbackQueryHandler
)

# =============== –ù–ê–°–¢–†–û–ô–ö–ò ===============
TOKEN = "–í–ê–® –¢–û–ö–ï–ù" 

DB_CONFIG = {
    "host": "localhost",
    "user": "postgres", # –ù–ê–ó–í–ê–ù–ò–ï –ë–î –ö–û–¢–û–†–£–Æ –ò–°–ü–û–õ–¨–ó–£–ï–¢–ï
    "password": "–í–ê–® –ü–ê–†–û–õ–¨",
    "dbname": "–í–ê–®–ï –ù–ê–ó–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ù–û–ì–û –ë–î"
}

ADMIN_CHAT_ID = 0 #–ê–ô–î–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê (–ù–ï –Æ–ó–ï–†–ù–ï–ô–ú)

# =============== –°–û–°–¢–û–Ø–ù–ò–Ø ===============
NAME, PHONE, CAR, PROBLEM, PICK_DATE, PICK_TIME = range(6)

logging.basicConfig(level=logging.INFO)

# =============== –ö–õ–ê–í–ò–ê–¢–£–†–´ ===============
main_menu_keyboard = ReplyKeyboardMarkup(
    [["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"], ["–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–£—Å–ª—É–≥–∏"]],
    resize_keyboard=True
)

back_to_menu_keyboard = ReplyKeyboardMarkup(
    [["üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
    resize_keyboard=True
)

# =============== –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î ===============
def save_to_db(data):
    conn = psycopg2.connect(**DB_CONFIG)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS service_requests (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            name TEXT,
            phone TEXT,
            car TEXT,
            problem TEXT,
            preferred_datetime TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    cur.execute("""
        INSERT INTO service_requests (user_id, name, phone, car, problem, preferred_datetime)
        VALUES (%s, %s, %s, %s, %s, %s)
    """, (
        data["user_id"],
        data["name"],
        data["phone"],
        data["car"],
        data["problem"],
        data["datetime"]
    ))
    conn.commit()
    cur.close()
    conn.close()

# =============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ===============
def get_date_keyboard():
    today = date.today()
    buttons = []
    for i in range(6):
        d = today + timedelta(days=i)
        buttons.append([InlineKeyboardButton(d.strftime("%d.%m.%Y"), callback_data=f"date|{d}")])
    return InlineKeyboardMarkup(buttons)

def get_time_keyboard(selected_date):
    conn = psycopg2.connect(**DB_CONFIG)
    cur = conn.cursor()
    cur.execute("""
        SELECT preferred_datetime FROM service_requests
        WHERE DATE(preferred_datetime) = %s
    """, (selected_date,))
    existing = [row[0].strftime("%H:%M") for row in cur.fetchall()]
    cur.close()
    conn.close()

    times = [f"{hour:02d}:00" for hour in range(9, 18)]
    buttons = []
    row = []
    for t in times:
        if t not in existing:
            row.append(InlineKeyboardButton(t, callback_data=f"time|{t}"))
        if len(row) == 3:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–µ", callback_data="back_to_date")])
    return InlineKeyboardMarkup(buttons)

# =============== –•–ï–ù–î–õ–ï–†–´ ===============
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram-–±–æ—Ç –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard
    )

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text("üìç –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É\nüìû +79614021441\nüïò –ü–Ω-–°–±: 09:00‚Äì19:00")
    elif text == "–£—Å–ª—É–≥–∏":
        await update.message.reply_text("üõ† –ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞\nüîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è\nüöó –®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂\nüì¶ –¢–û –∏ —Ä–µ–º–æ–Ω—Ç –ø–æ–¥–≤–µ—Å–∫–∏")
    elif text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main(update, context)

# =============== –ó–ê–ü–ò–°–¨ –ö–õ–ò–ï–ù–¢–ê ===============
async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=back_to_menu_keyboard)
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await back_to_main(update, context)
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567):")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await back_to_main(update, context)
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("–ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    return CAR

async def get_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await back_to_main(update, context)
    context.user_data["car"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞/—É—Å–ª—É–≥–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    return PROBLEM

async def get_problem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await back_to_main(update, context)
    context.user_data["problem"] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:", reply_markup=get_date_keyboard())
    return PICK_DATE

async def pick_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, date_str = query.data.split("|")
    context.user_data["selected_date"] = date_str
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=get_time_keyboard(date_str))
    return PICK_TIME

async def pick_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "back_to_date":
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:", reply_markup=get_date_keyboard())
        return PICK_DATE
    _, time_str = query.data.split("|")
    selected_date = context.user_data["selected_date"]
    full_datetime = datetime.strptime(f"{selected_date} {time_str}", "%Y-%m-%d %H:%M")

    context.user_data["datetime"] = full_datetime
    context.user_data["user_id"] = query.from_user.id

    save_to_db(context.user_data)

    message = (
        "üì¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –°–¢–û:\n"
        f"üë§ –ò–º—è: {context.user_data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        f"üöó –ê–≤—Ç–æ: {context.user_data['car']}\n"
        f"üîß –ü—Ä–æ–±–ª–µ–º–∞: {context.user_data['problem']}\n"
        f"üìÖ –í—Ä–µ–º—è: {full_datetime.strftime('%d.%m.%Y, %H:%M')}"
    )
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)

    await query.message.edit_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    return ConversationHandler.END

# =============== –°–ë–†–û–° ===============
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard)
    return ConversationHandler.END

# =============== –ó–ê–ü–£–°–ö ===============
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ó–∞–ø–∏—Å–∞—Ç—å—Å—è$"), ask_name)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            CAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_car)],
            PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_problem)],
            PICK_DATE: [CallbackQueryHandler(pick_date, pattern="^date|.*")],
            PICK_TIME: [CallbackQueryHandler(pick_time, pattern="^(time|back_to_date).*")]
        },
        fallbacks=[
            MessageHandler(filters.Regex("^üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), back_to_main),
            CommandHandler("cancel", cancel)
        ],
        allow_reentry=True
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    app.run_polling()

if __name__ == '__main__':
    main()
